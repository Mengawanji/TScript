"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = useCalculator;
const react_1 = require("react");
const calculator_1 = require("../utils/calculator");
function calculatorReducer(state, action) {
    switch (action.type) {
        case 'ADD_DIGIT':
            if (state.overwrite) {
                return {
                    ...state,
                    currentOperand: action.payload,
                    overwrite: false,
                };
            }
            if (action.payload === '0' && state.currentOperand === '0') {
                return state;
            }
            if (action.payload === '.' && state.currentOperand.includes('.')) {
                return state;
            }
            if (state.currentOperand === '0' && action.payload !== '.') {
                return {
                    ...state,
                    currentOperand: action.payload,
                };
            }
            return {
                ...state,
                currentOperand: `${state.currentOperand}${action.payload}`,
            };
        case 'CHOOSE_OPERATOR':
            if (state.currentOperand === '' && state.previousOperand === '') {
                return state;
            }
            if (state.previousOperand === '') {
                return {
                    ...state,
                    operator: action.payload,
                    previousOperand: state.currentOperand,
                    currentOperand: '',
                };
            }
            if (state.currentOperand === '') {
                return {
                    ...state,
                    operator: action.payload,
                };
            }
            return {
                ...state,
                previousOperand: (0, calculator_1.calculateResult)(state.previousOperand, state.currentOperand, state.operator),
                operator: action.payload,
                currentOperand: '',
            };
        case 'CLEAR':
            return calculator_1.initialState;
        case 'DELETE_DIGIT':
            if (state.overwrite) {
                return {
                    ...calculator_1.initialState,
                };
            }
            if (state.currentOperand.length === 1) {
                return {
                    ...state,
                    currentOperand: '0',
                };
            }
            return {
                ...state,
                currentOperand: state.currentOperand.slice(0, -1),
            };
        case 'EVALUATE':
            if (state.operator == null || state.currentOperand === '' || state.previousOperand === '') {
                return state;
            }
            return {
                ...state,
                overwrite: true,
                previousOperand: '',
                operator: null,
                currentOperand: (0, calculator_1.calculateResult)(state.previousOperand, state.currentOperand, state.operator),
            };
        case 'PERCENTAGE':
            if (state.currentOperand === '')
                return state;
            return {
                ...state,
                currentOperand: (parseFloat(state.currentOperand) / 100).toString(),
            };
        case 'NEGATE':
            if (state.currentOperand === '')
                return state;
            return {
                ...state,
                currentOperand: (parseFloat(state.currentOperand) * -1).toString(),
            };
        default:
            return state;
    }
}
function useCalculator() {
    const [state, dispatch] = (0, react_1.useReducer)(calculatorReducer, calculator_1.initialState);
    return {
        ...state,
        addDigit: (digit) => dispatch({ type: 'ADD_DIGIT', payload: digit }),
        chooseOperator: (operator) => dispatch({ type: 'CHOOSE_OPERATOR', payload: operator }),
        clear: () => dispatch({ type: 'CLEAR' }),
        deleteDigit: () => dispatch({ type: 'DELETE_DIGIT' }),
        evaluate: () => dispatch({ type: 'EVALUATE' }),
        percentage: () => dispatch({ type: 'PERCENTAGE' }),
        negate: () => dispatch({ type: 'NEGATE' }),
    };
}
//# sourceMappingURL=data:application/json;base64,